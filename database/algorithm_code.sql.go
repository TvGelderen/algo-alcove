// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: algorithm_code.sql

package database

import (
	"context"
)

const createAlgorithmCode = `-- name: CreateAlgorithmCode :exec
INSERT INTO algorithm_code (algorithm_id, language, code)
VALUES ($1, $2, $3)
`

type CreateAlgorithmCodeParams struct {
	AlgorithmID int32
	Language    string
	Code        string
}

func (q *Queries) CreateAlgorithmCode(ctx context.Context, arg CreateAlgorithmCodeParams) error {
	_, err := q.db.ExecContext(ctx, createAlgorithmCode, arg.AlgorithmID, arg.Language, arg.Code)
	return err
}

const getAlgorithmCodeByAgorithmId = `-- name: GetAlgorithmCodeByAgorithmId :many
SELECT id, algorithm_id, language, code FROM algorithm_code
WHERE algorithm_id = $1
`

func (q *Queries) GetAlgorithmCodeByAgorithmId(ctx context.Context, algorithmID int32) ([]AlgorithmCode, error) {
	rows, err := q.db.QueryContext(ctx, getAlgorithmCodeByAgorithmId, algorithmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlgorithmCode
	for rows.Next() {
		var i AlgorithmCode
		if err := rows.Scan(
			&i.ID,
			&i.AlgorithmID,
			&i.Language,
			&i.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlgorithmCode = `-- name: UpdateAlgorithmCode :exec
UPDATE algorithm_code
SET language = $2,
    code = $3
WHERE id = $1
`

type UpdateAlgorithmCodeParams struct {
	ID       int32
	Language string
	Code     string
}

func (q *Queries) UpdateAlgorithmCode(ctx context.Context, arg UpdateAlgorithmCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateAlgorithmCode, arg.ID, arg.Language, arg.Code)
	return err
}
