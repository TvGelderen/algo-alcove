package algorithms

import (
	"github.com/TvGelderen/algo-alcove/view/pages"
	"github.com/TvGelderen/algo-alcove/view/components"
)

templ InsertionSort() {
	@pages.Algorithms() {
		@components.BreadCrumb([]components.BreadCrumbLink{
			{
				Path:  "/algorithms",
				Title: "Algorithms",
			},
			{
				Path:  "/algorithms/sorting",
				Title: "Sorting",
			},
			{
				Title: "Insertion Sort",
			},
		})
		<h2 class="text-2xl md:text-3xl">Bubble Sort</h2>
		<div class="article">
			<p>
				In the realm of sorting algorithms, Insertion Sort stands out for its simplicity and elegance. Like a meticulous
				dance of elements, this algorithm efficiently arranges a list by iteratively placing unsorted elements into
				their correct positions within a sorted section of the array.
			</p>
			<p>
				Insertion Sort operates by dividing the array into two segments â€“ the sorted and the unsorted. The algorithm
				takes one element at a time from the unsorted segment and inserts it into its proper place within the sorted
				segment. This process continues until the entire array is sorted. While Insertion Sort may not be the fastest
				algorithm for large datasets, its efficiency becomes apparent with partially ordered or small sets of data.
			</p>
			<p>
				One of the key advantages of Insertion Sort lies in its adaptive nature. It performs exceptionally well when
				given partially sorted data, as it minimizes the number of comparisons and swaps. This makes it a favorable
				choice for scenarios where the dataset is likely to have already been partially ordered.
			</p>
			<p>
				The step-by-step nature of Insertion Sort makes it a valuable tool for educational purposes. It provides a clear
				and intuitive introduction to the concepts of sorting algorithms, making it an ideal starting point for those
				new to the field.
			</p>
			<p>
				Insertion Sort's simplicity is reflected not only in its algorithmic steps but also in its minimal space
				requirements. It is an in-place sorting algorithm, meaning it sorts the data without requiring additional
				memory, making it memory-efficient for applications with tight constraints.
			</p>
		</div>
        @components.Code("javascript", `<span class="hljs-keyword">function</span> <span class="hljs-title function_">insertionSort</span>(<span class="hljs-params">arr</span>)  
{  
    <span class="hljs-keyword">let</span> i, j, key;  
    <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;

    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; len; i++) 
    {  
        key = arr[i];  
        j = i - <span class="hljs-number">1</span>;  
   
        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; key) 
        {  
            arr[j + <span class="hljs-number">1</span>] = arr[j];  
            j = j - <span class="hljs-number">1</span>;  
        }  
        arr[j + <span class="hljs-number">1</span>] = key;  
    }  
}`)
		@VisualizeSort("insertion-sort")
	}
}
